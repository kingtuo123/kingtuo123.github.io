<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>stm32 on king's blog</title><link>https://kingtuo123.com/tags/stm32/</link><description>Recent content in stm32 on king's blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 15 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kingtuo123.com/tags/stm32/index.xml" rel="self" type="application/rss+xml"/><item><title>STM32 RCC 时钟配置</title><link>https://kingtuo123.com/posts/stm32-rcc-config/</link><pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/stm32-rcc-config/</guid><description>&amp;ndash;</description></item><item><title>Linux 下编译 STM32</title><link>https://kingtuo123.com/posts/build-stm32-in-linux/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/build-stm32-in-linux/</guid><description>linux 使用 make 管理 stm32 工程</description></item><item><title>STM32 GPIO 初始化</title><link>https://kingtuo123.com/posts/stm32-gpio-template/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/stm32-gpio-template/</guid><description>基于 STM32F10x 系列 GPIO 寄存器 寄存器 说明 GPIOx_CRL 端口配置低位寄存器（Port configuration register low） GPIOx_CRH 端口配置高位寄存器（Port configuration register high） GPIOx_IDR 端口输入数据寄存器（Port input data register） GPIOx_ODR 端口输出数据寄存器（Port output data register） GPIOx_BSRR 端口位设置/清除寄存器（Port bit set/reset register） GPIOx_BRR 端口位清除寄存器（Port bit reset register） GPIOx_CRL &amp;amp; GPIOx_CRH 每一个引脚有4位可配置
MODE：模式设置
00：输入模式 01：输出模式，最大 10 MHZ 10：输出模式，最大 2 MHZ 11：输出模式，最大 50 MHZ CNF：输入模式配置
00：模拟输入 01：浮空输入 10：上拉/下拉输入 11：保留 CNF：输出模式配置
00：推挽输出 01：开漏输出 10：复用推挽输出 11：复用开漏输出 GPIOx_IDR 0-15 位只读，读出的数值为 IO 口对应状态
GPIOx_ODR 结构同上，可读可写</description></item><item><title>STM32 位带操作</title><link>https://kingtuo123.com/posts/stm32-bit-banding/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/stm32-bit-banding/</guid><description>类似于51单片机中 sbit LED = P0^1; 直接操作 LED 变量就可以控制 P0_1 端口了。
STM32 中是通过对处在 位带区 的寄存器的对应位映射到 别名区 ，再通过操作 别名区 来控制对应寄存器的位。
STM32 是32位系统总线，所以位带区的一个位对应别名区会膨胀为32位，即四个字节。
位带区 外设位带区的地址为：0X40000000 ~ 0X40100000
SRAM 的位带区的地址为：0X20000000 ~ X20100000
位带别名区地址 对于片上外设位带区的某个比特，记它所在字节的地址为 A，位序号为 n∈[0,7]，
则该比特在别名区的地址为：
AliasAddr = 0x42000000 + (A - 0x40000000)*8*4 + n*4 0x42000000：别名区起始地址 (A - 0x40000000)：外设地址相对基地址偏移多少个字节 (A - 0x40000000)*8：偏移的字节总共有多少位，所以乘 8 (A - 0x40000000)*8*4：每一位膨胀为 32 位（四个字节），所以乘 4 n*4：所在字节上的第 n 位膨胀为 32 位，所以乘 4 操作别名区只对 LSB 有效，即第 0 位
同样对于 SRAM 位带区的某个比特在别名区的地址为：</description></item><item><title>Linux 下使用 stlink 烧录程序</title><link>https://kingtuo123.com/posts/stlink-linux/</link><pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/stlink-linux/</guid><description>stlink 工具命令用法</description></item><item><title>STM32 常用资源</title><link>https://kingtuo123.com/posts/stm32-resources/</link><pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/stm32-resources/</guid><description>一些常用资源的下载链接</description></item><item><title>Linux 下搭建 stm32 开发环境</title><link>https://kingtuo123.com/posts/linux-stm32-development/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/linux-stm32-development/</guid><description>安装 gcc 工具链，isp / stlink 下载工具</description></item><item><title>STM32 ISP 一键下载</title><link>https://kingtuo123.com/posts/stm32-isp-flash/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/stm32-isp-flash/</guid><description>ISP 一键下载原理，windows 和 linux 平台 ISP 下载方法</description></item></channel></rss>