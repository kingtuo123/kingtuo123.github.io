[{"content":"docker镜像 拉取镜像 docker image pull \u0026lt;repository\u0026gt;:\u0026lt;tag\u0026gt;  查看镜像 docker image ls -a docker images  删除镜像 docker image rm \u0026lt;repository\u0026gt;:\u0026lt;tag\u0026gt; docker image rm \u0026lt;image id\u0026gt;  id不用补全，比如 ba6acccedd29 ，只需输入 ba ，只要id前几位没和其他镜像重复。\n当镜像已有创建的容器时，无法删除。可以使用-f参数强制删除。\n提交镜像 首先你在基础镜像生成的容器中做了修改后，使用 commit 命令可以生成一个新的镜像，这个镜像相较于基础镜像多了一层Layer（你在容器内做的所有修改都打包成了Layer）\ndocker commit -m \u0026quot;some info\u0026quot;  生成的镜像可以用 image 命令查看到，commit 之后你可以使用 push 命令推送到远端仓库\ndocker容器 创建容器 以下命令会自动创建一个容器并运行bash，也可以用 create 命令创建容器。\ndocker container run --name \u0026lt;name\u0026gt; -it --rm \u0026lt;repository\u0026gt;:\u0026lt;tag\u0026gt; bash  run 常用参数：\n --name：指定容器名称 -i：开启标准输入 -t：分配伪终端 --rm：退出容器后自动删除容器，多用于一次性测试 -v：挂载路径，格式 -v \u0026lt;host path\u0026gt;:\u0026lt;container path\u0026gt; -p：指定端口映射，格式 -p \u0026lt;host port\u0026gt;:\u0026lt;container port\u0026gt; -P：随机端口映射，docker会随机映射一个端口到内部容器的网络端口 -d：后台运行容器，并返回容器ID，类似命令后加\u0026amp; -e：设置环境变量，格式 -e \u0026lt;variables1\u0026gt;=\u0026lt;variables2\u0026gt; --network：连接指定网络，系统预定义的有bridge、host、null三种，默认bridge（桥接） --privileged：扩大容器权限，在容器内可以看到host的更多设备、可mount挂载设备  启动容器 docker container start \u0026lt;name|container id\u0026gt;  start 后面可跟多个 id\n进入容器 docker container attach \u0026lt;name|container id\u0026gt; docker container exec -it \u0026lt;name|container id\u0026gt; bash  attach 在退出容器后会停止容器，exec 不会\nattach 相当于进入当前终端，exec 相当于新开了一个终端\n停止容器 docker container stop \u0026lt;name|container id\u0026gt; docker container kill \u0026lt;name|container id\u0026gt;  stop 先发送SIGTERM信号，容器内程序可以做退出前的准备工作，一段时间之后再发送SIGKILL信号。\nkill 发送SIGKILL信号，应用程序直接退出。\n查看容器 列出所有容器\ndocker container ls -a  删除容器 docker container rm \u0026lt;name|container id\u0026gt;  使用 prune 可以删除所有已停止的容器\ndocker container prune  文件拷贝 拷贝无需容器运行，只要该容器存在即可，以下命令从容器拷贝至主机\ndocker container cp \u0026lt;container id|name\u0026gt;:\u0026lt;container path\u0026gt; \u0026lt;host path\u0026gt;  ","date":"2021-03-11T00:00:00Z","permalink":"https://kingtuo123.com/p/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","title":"Docker基本命令"},{"content":"创建SSH Key 运行下列命令创建SSH Key，邮箱使用github创建时用的邮箱。\nssh-keygen -t rsa -C \u0026quot;kingtuo123@foxmail.com\u0026quot;  输出如下，一路回车\nGenerating public/private rsa key pair. Enter file in which to save the key (/home/king/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again:  以上会在 ～/.ssh 目录下生成 id_rsa （私钥）和 id_rsa.pub （公钥）文件。\n如果你没有使用默认的路径，记得修改 /etc/ssh/ssh_config 或 ~/.ssh/config\n1 2 3 4 5  # 这里是默认身份文件路径 # IdentityFile ~/.ssh/id_rsa # IdentityFile ~/.ssh/id_dsa # IdentityFile ~/.ssh/id_ecdsa # IdentityFile ~/.ssh/id_ed25519   添加公钥 查看公钥的内容\ncat ~/.ssh/id_rsa.pub  打开github在 setting -\u0026gt; SSH and GPG keys 中添加SSH Key，将上面的输出复制进去。\n验证 ssh -T git@github.com  返回如下信息则配置成功\nYou've successfully authenticated, but GitHub does not provide shell access  使用SSH Key推送   使用以上的链接。\n","date":"2020-03-09T00:00:00Z","permalink":"https://kingtuo123.com/p/github%E8%AE%BE%E7%BD%AEssh-key/","title":"Github设置SSH Key"},{"content":"安装 emerge -av curlftpfs  需要内核启用 fuse\n以root挂载 创建挂载点\nmkdir /mnt/ftp  挂载，若没有用户名密码就省去 -o 及后面参数\ncurlftpfs ftp.example.com /mnt/ftp/ -o user=username:password  想让普通用户有访问权限，添加 allow_other 选项，以逗号分隔\ncurlftpfs ftp.example.com /mnt/ftp/ -o user=username:password,allow_other  以普通用户挂载 mkdir ~/example curlftpfs -o ssl,utf8 ftp://example.com/ ~/example  ssl ：使用SSL/TLS传输数据\nutf8 ： 使用utf8编码\n卸载 fusermount -u ~/example  或者\numount ~/example  ","date":"2019-03-09T00:00:00Z","permalink":"https://kingtuo123.com/p/curlftpfs%E6%8C%82%E8%BD%BDftp%E5%88%B0%E6%9C%AC%E5%9C%B0/","title":"Curlftpfs挂载ftp到本地"},{"content":"初始化 1 2 3 4 5 6  mkdir blog cd blog git init git remote add origin git@github.com:kingtuo123/kingtuo123.github.io.git echo resources/ \u0026gt;\u0026gt; .gitignore echo public/ \u0026gt;\u0026gt; .gitignore   添加主题\u0026amp;相关文件 1 2 3 4 5 6 7 8 9 10 11  git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack # 拷贝主题SCSS文件至根目录 # 后面修改主题就改assets/scss下的文件，它比主题下的文件有更高的优先级 cp themes/hugo-theme-stack/assets/ . -r # 一些文章模板 cp themes/hugo-theme-stack/exampleSite/content/ . -r # 配置文件  cp themes/hugo-theme-stack/exampleSite/config.yaml .   修改config.yaml 按需修改，参考配置主题\n设置GitHub Pages Action 1 2  mkdir -p .github/workflows/ touch .github/workflows/gh-pages.yml   编辑 gh-pages.yml，参考peaceiris/actions-gh-pages \n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  name:github pageson:push:branches:- masterpaths-ignore:- \u0026#39;README.md\u0026#39;- \u0026#39;.gitignore\u0026#39;- \u0026#39;.gitmodules\u0026#39;pull_request:jobs:deploy:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GITHUB_TOKEN }}publish_dir:./public  推送至仓库  git push -u origin master    查看Action中的信息，如上则配置正确。 设置GitHub Pages Source 在Pages设置中，修改Source分支为gh-pages\n  等待gh-pages自动部署完成后，即可打开站点。\n","date":"2019-01-09T00:00:00Z","permalink":"https://kingtuo123.com/p/hugo-deploy/","title":"Hugo deploy"}]