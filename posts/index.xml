<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on king's blog</title><link>https://kingtuo123.com/posts/</link><description>Recent content in Posts on king's blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 11 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kingtuo123.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>STM32 ISP 一键下载</title><link>https://kingtuo123.com/posts/stm32-isp-flash/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/stm32-isp-flash/</guid><description>ISP一键下载原理，windows和linux平台ISP下载方法</description></item><item><title>Makefile基础</title><link>https://kingtuo123.com/posts/makefile-basic/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/makefile-basic/</guid><description>翻译自 Makefile Tutorial，部分有增删或修改，仅供参考。
Makefile 语法 makefile 由一组规则组成。如下所示：
targets: prerequisites command command command targets 是文件名，以空格分隔。通常一个规则只有一个目标。
command 通常是用于生成 targets 的一系列步骤。以 Tab 开头。
prerequisites 也是文件名，以空格分隔。这些文件也称为 依赖 ，需要在执行 command 之前存在。
示例 下面的 makefile 由三个单独的规则组成。当你在终端执行 make blah ，会以下面步骤运行并生成 blan 文件：
make 以 blah 作为目标，所以它首先搜索这个目标。 blah 需要 blah.o ，make 会搜索 blah.o 。 blah.o 需要 blah.c ，make会搜索 blah.c 。 blah.c 不需要依赖，所以会执行 echo 命令，生成 blah.c 。 blah.o 的依赖满足，会执行 cc -c 命令，生成 blah.</description></item><item><title>Docker基本命令</title><link>https://kingtuo123.com/posts/docker-base-cmd/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/docker-base-cmd/</guid><description>docker镜像 拉取镜像 docker image pull &amp;lt;repository&amp;gt;:&amp;lt;tag&amp;gt; 查看镜像 docker image ls -a docker images 删除镜像 docker image rm &amp;lt;repository&amp;gt;:&amp;lt;tag&amp;gt; docker image rm &amp;lt;image id&amp;gt; id不用补全，比如 ba6acccedd29 ，只需输入 ba ，只要id前几位没和其他镜像重复。
当镜像已有创建的容器时，无法删除。可以使用-f参数强制删除。
提交镜像 首先你在基础镜像生成的容器中做了修改后，使用 commit 命令可以生成一个新的镜像，这个镜像相较于基础镜像多了一层Layer（你在容器内做的所有修改都打包成了Layer）
docker commit -m &amp;#34;some info&amp;#34; 生成的镜像可以用 image 命令查看到，commit 之后你可以使用 push 命令推送到远端仓库
docker容器 创建容器 以下命令会自动创建一个容器并运行bash，也可以用 create 命令创建容器。
docker container run --name &amp;lt;name&amp;gt; -it --rm &amp;lt;repository&amp;gt;:&amp;lt;tag&amp;gt; bash run 常用参数：
--name：指定容器名称 -i：开启标准输入 -t：分配伪终端 --rm：退出容器后自动删除容器，多用于一次性测试 -v：挂载路径，格式 -v &amp;lt;host path&amp;gt;:&amp;lt;container path&amp;gt; -p：指定端口映射，格式 -p &amp;lt;host port&amp;gt;:&amp;lt;container port&amp;gt; -P：随机端口映射，docker会随机映射一个端口到内部容器的网络端口 -d：后台运行容器，并返回容器ID，类似命令后加&amp;amp; -e：设置环境变量，格式 -e &amp;lt;variables1&amp;gt;=&amp;lt;variables2&amp;gt; --network：连接指定网络，系统预定义的有bridge、host、null三种，默认bridge（桥接） --privileged：扩大容器权限，在容器内可以看到host的更多设备、可mount挂载设备 启动容器 docker container start &amp;lt;name|container id&amp;gt; start 后面可跟多个 id</description></item><item><title>Markdown语法</title><link>https://kingtuo123.com/posts/markdown-syntax/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/markdown-syntax/</guid><description>标题 # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 最后一个#号后面加空格
字体样式 **这是加粗的文字** *这是倾斜的文字* ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ 引用 &amp;gt;这是引用的内容 &amp;gt;&amp;gt;这是引用的内容 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;这是引用的内容 ##　分割线
三个或者三个以上的 - 或者 * 都可以。
--- ---- *** ***** 图片 ![图片alt](图片地址 &amp;#34;图片title&amp;#34;) 若要指定图片大小/位置，使用HTML
&amp;lt;div align=&amp;#34;center&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;1.png&amp;#34; style=&amp;#34;max-height:180px&amp;#34;&amp;gt;&amp;lt;/img&amp;gt; &amp;lt;/div&amp;gt; 超链接 [超链接名](超链接地址 &amp;#34;超链接title&amp;#34;) 列表 无序列表 - 和+ 和* 三个符号都可以
- 列表内容 + 列表内容 * 列表内容 显示如下
列表内容 列表内容 列表内容 有序列表 数字加点</description></item><item><title>Curlftpfs挂载ftp到本地</title><link>https://kingtuo123.com/posts/curlftpfs-mount-local/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/curlftpfs-mount-local/</guid><description>安装 emerge -av curlftpfs 需要内核启用 fuse
以root挂载 创建挂载点
mkdir /mnt/ftp 挂载，若没有用户名密码就省去 -o 及后面参数
curlftpfs ftp.example.com /mnt/ftp/ -o user=username:password 想让普通用户有访问权限，添加 allow_other 选项，以逗号分隔
curlftpfs ftp.example.com /mnt/ftp/ -o user=username:password,allow_other 以普通用户挂载 mkdir ~/example curlftpfs -o ssl,utf8 ftp://example.com/ ~/example ssl ：使用SSL/TLS传输数据
utf8 ： 使用utf8编码
卸载 fusermount -u ~/example 或者
umount ~/example</description></item><item><title>Github设置SSH Key</title><link>https://kingtuo123.com/posts/github-set-sshkey/</link><pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/github-set-sshkey/</guid><description>创建SSH Key 运行下列命令创建SSH Key，邮箱使用github创建时用的邮箱。
ssh-keygen -t rsa -C &amp;#34;kingtuo123@foxmail.com&amp;#34; 输出如下，一路回车
Generating public/private rsa key pair. Enter file in which to save the key (/home/king/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: 以上会在 ～/.ssh 目录下生成 id_rsa （私钥）和 id_rsa.pub （公钥）文件。
如果你没有使用默认的路径，记得修改 /etc/ssh/ssh_config 或 ~/.ssh/config
# 这里是默认身份文件路径 # IdentityFile ~/.ssh/id_rsa # IdentityFile ~/.ssh/id_dsa # IdentityFile ~/.ssh/id_ecdsa # IdentityFile ~/.ssh/id_ed25519 添加公钥 查看公钥的内容
cat ~/.ssh/id_rsa.pub 打开github在 setting -&amp;gt; SSH and GPG keys 中添加SSH Key，将上面的输出复制进去。</description></item><item><title>Hugo deploy</title><link>https://kingtuo123.com/posts/hugo-deploy/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://kingtuo123.com/posts/hugo-deploy/</guid><description>初始化 mkdir blog cd blog git init git remote add origin git@github.com:kingtuo123/kingtuo123.github.io.git echo resources/ &amp;gt;&amp;gt; .gitignore echo public/ &amp;gt;&amp;gt; .gitignore 添加主题&amp;amp;相关文件 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack # 拷贝主题SCSS文件至根目录 # 后面修改主题就改assets/scss下的文件，它比主题下的文件有更高的优先级 cp themes/hugo-theme-stack/assets/ . -r # 一些文章模板 cp themes/hugo-theme-stack/exampleSite/content/ . -r # 配置文件 cp themes/hugo-theme-stack/exampleSite/config.yaml . 修改config.yaml 按需修改，参考配置主题
配置GitHub Action mkdir -p .github/workflows/ touch .github/workflows/gh-pages.yml 编辑 gh-pages.yml，参考peaceiris/actions-gh-pages
name:github pageson:push:branches:- masterpaths-ignore:- &amp;#39;README.md&amp;#39;- &amp;#39;.gitignore&amp;#39;- &amp;#39;.gitmodules&amp;#39;pull_request:jobs:deploy:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .</description></item></channel></rss>